//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq.Expressions;
using FlashMapper.Models;
using FlashMapper.Services;
using FlashMapper.Internal.Utils;

namespace FlashMapper.MultiSource
{
    public class FlashMapperMappingConfigurator<TSource1, TSource2, TDestination> : IFlashMapperMappingConfigurator<TSource1, TSource2, TDestination>
    {
        private readonly IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2>, TDestination> internalConfigurator;

        public FlashMapperMappingConfigurator(IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2>, TDestination> internalConfigurator)
        {
            this.internalConfigurator = internalConfigurator;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TDestination> UnresolvedBehavior(UnresolvedPropertyBehavior unresolvedPropertyBehavior)
        {
            internalConfigurator.UnresolvedBehavior(unresolvedPropertyBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TDestination> CollisionBehavior(SelectSourceCollisionBehavior selectSourceCollisionBehavior)
        {
            internalConfigurator.CollisionBehavior(selectSourceCollisionBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TDestination> SourceNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.SourceNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TDestination> SourceNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.SourceNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TDestination> DestinationNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.DestinationNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TDestination> DestinationNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.DestinationNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TDestination> AfterMap(Action<TSource1, TSource2, TDestination> afterMapCallback)
        {
            internalConfigurator.AfterMap((w, d) => afterMapCallback(w.Source1, w.Source2, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TDestination> BeforeMap(Action<TSource1, TSource2, TDestination> beforeMapCallback)
        {
            internalConfigurator.BeforeMap((w, d) => beforeMapCallback(w.Source1, w.Source2, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TDestination> RegisterService<TService>(Func<IFlashMapperDependencyResolver, TService> serviceRegistration) where TService : class, IFlashMapperService
        {
            internalConfigurator.RegisterService(serviceRegistration);
            return this;
        }
    }
    public class FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TDestination> : IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TDestination>
    {
        private readonly IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3>, TDestination> internalConfigurator;

        public FlashMapperMappingConfigurator(IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3>, TDestination> internalConfigurator)
        {
            this.internalConfigurator = internalConfigurator;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TDestination> UnresolvedBehavior(UnresolvedPropertyBehavior unresolvedPropertyBehavior)
        {
            internalConfigurator.UnresolvedBehavior(unresolvedPropertyBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TDestination> CollisionBehavior(SelectSourceCollisionBehavior selectSourceCollisionBehavior)
        {
            internalConfigurator.CollisionBehavior(selectSourceCollisionBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TDestination> SourceNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.SourceNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TDestination> SourceNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.SourceNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TDestination> DestinationNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.DestinationNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TDestination> DestinationNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.DestinationNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TDestination> AfterMap(Action<TSource1, TSource2, TSource3, TDestination> afterMapCallback)
        {
            internalConfigurator.AfterMap((w, d) => afterMapCallback(w.Source1, w.Source2, w.Source3, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TDestination> BeforeMap(Action<TSource1, TSource2, TSource3, TDestination> beforeMapCallback)
        {
            internalConfigurator.BeforeMap((w, d) => beforeMapCallback(w.Source1, w.Source2, w.Source3, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TDestination> RegisterService<TService>(Func<IFlashMapperDependencyResolver, TService> serviceRegistration) where TService : class, IFlashMapperService
        {
            internalConfigurator.RegisterService(serviceRegistration);
            return this;
        }
    }
    public class FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TDestination> : IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TDestination>
    {
        private readonly IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4>, TDestination> internalConfigurator;

        public FlashMapperMappingConfigurator(IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4>, TDestination> internalConfigurator)
        {
            this.internalConfigurator = internalConfigurator;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TDestination> UnresolvedBehavior(UnresolvedPropertyBehavior unresolvedPropertyBehavior)
        {
            internalConfigurator.UnresolvedBehavior(unresolvedPropertyBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TDestination> CollisionBehavior(SelectSourceCollisionBehavior selectSourceCollisionBehavior)
        {
            internalConfigurator.CollisionBehavior(selectSourceCollisionBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TDestination> SourceNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.SourceNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TDestination> SourceNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.SourceNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TDestination> DestinationNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.DestinationNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TDestination> DestinationNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.DestinationNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TDestination> AfterMap(Action<TSource1, TSource2, TSource3, TSource4, TDestination> afterMapCallback)
        {
            internalConfigurator.AfterMap((w, d) => afterMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TDestination> BeforeMap(Action<TSource1, TSource2, TSource3, TSource4, TDestination> beforeMapCallback)
        {
            internalConfigurator.BeforeMap((w, d) => beforeMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TDestination> RegisterService<TService>(Func<IFlashMapperDependencyResolver, TService> serviceRegistration) where TService : class, IFlashMapperService
        {
            internalConfigurator.RegisterService(serviceRegistration);
            return this;
        }
    }
    public class FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination> : IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination>
    {
        private readonly IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5>, TDestination> internalConfigurator;

        public FlashMapperMappingConfigurator(IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5>, TDestination> internalConfigurator)
        {
            this.internalConfigurator = internalConfigurator;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination> UnresolvedBehavior(UnresolvedPropertyBehavior unresolvedPropertyBehavior)
        {
            internalConfigurator.UnresolvedBehavior(unresolvedPropertyBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination> CollisionBehavior(SelectSourceCollisionBehavior selectSourceCollisionBehavior)
        {
            internalConfigurator.CollisionBehavior(selectSourceCollisionBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination> SourceNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.SourceNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination> SourceNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.SourceNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination> DestinationNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.DestinationNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination> DestinationNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.DestinationNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination> AfterMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination> afterMapCallback)
        {
            internalConfigurator.AfterMap((w, d) => afterMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination> BeforeMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination> beforeMapCallback)
        {
            internalConfigurator.BeforeMap((w, d) => beforeMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination> RegisterService<TService>(Func<IFlashMapperDependencyResolver, TService> serviceRegistration) where TService : class, IFlashMapperService
        {
            internalConfigurator.RegisterService(serviceRegistration);
            return this;
        }
    }
    public class FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination> : IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination>
    {
        private readonly IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>, TDestination> internalConfigurator;

        public FlashMapperMappingConfigurator(IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>, TDestination> internalConfigurator)
        {
            this.internalConfigurator = internalConfigurator;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination> UnresolvedBehavior(UnresolvedPropertyBehavior unresolvedPropertyBehavior)
        {
            internalConfigurator.UnresolvedBehavior(unresolvedPropertyBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination> CollisionBehavior(SelectSourceCollisionBehavior selectSourceCollisionBehavior)
        {
            internalConfigurator.CollisionBehavior(selectSourceCollisionBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination> SourceNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.SourceNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination> SourceNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.SourceNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination> DestinationNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.DestinationNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination> DestinationNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.DestinationNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination> AfterMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination> afterMapCallback)
        {
            internalConfigurator.AfterMap((w, d) => afterMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination> BeforeMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination> beforeMapCallback)
        {
            internalConfigurator.BeforeMap((w, d) => beforeMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination> RegisterService<TService>(Func<IFlashMapperDependencyResolver, TService> serviceRegistration) where TService : class, IFlashMapperService
        {
            internalConfigurator.RegisterService(serviceRegistration);
            return this;
        }
    }
    public class FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination> : IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination>
    {
        private readonly IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>, TDestination> internalConfigurator;

        public FlashMapperMappingConfigurator(IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>, TDestination> internalConfigurator)
        {
            this.internalConfigurator = internalConfigurator;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination> UnresolvedBehavior(UnresolvedPropertyBehavior unresolvedPropertyBehavior)
        {
            internalConfigurator.UnresolvedBehavior(unresolvedPropertyBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination> CollisionBehavior(SelectSourceCollisionBehavior selectSourceCollisionBehavior)
        {
            internalConfigurator.CollisionBehavior(selectSourceCollisionBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination> SourceNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.SourceNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination> SourceNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.SourceNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination> DestinationNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.DestinationNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination> DestinationNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.DestinationNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination> AfterMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination> afterMapCallback)
        {
            internalConfigurator.AfterMap((w, d) => afterMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, w.Source7, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination> BeforeMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination> beforeMapCallback)
        {
            internalConfigurator.BeforeMap((w, d) => beforeMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, w.Source7, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination> RegisterService<TService>(Func<IFlashMapperDependencyResolver, TService> serviceRegistration) where TService : class, IFlashMapperService
        {
            internalConfigurator.RegisterService(serviceRegistration);
            return this;
        }
    }
    public class FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination> : IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination>
    {
        private readonly IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8>, TDestination> internalConfigurator;

        public FlashMapperMappingConfigurator(IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8>, TDestination> internalConfigurator)
        {
            this.internalConfigurator = internalConfigurator;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination> UnresolvedBehavior(UnresolvedPropertyBehavior unresolvedPropertyBehavior)
        {
            internalConfigurator.UnresolvedBehavior(unresolvedPropertyBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination> CollisionBehavior(SelectSourceCollisionBehavior selectSourceCollisionBehavior)
        {
            internalConfigurator.CollisionBehavior(selectSourceCollisionBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination> SourceNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.SourceNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination> SourceNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.SourceNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination> DestinationNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.DestinationNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination> DestinationNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.DestinationNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination> AfterMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination> afterMapCallback)
        {
            internalConfigurator.AfterMap((w, d) => afterMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, w.Source7, w.Source8, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination> BeforeMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination> beforeMapCallback)
        {
            internalConfigurator.BeforeMap((w, d) => beforeMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, w.Source7, w.Source8, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination> RegisterService<TService>(Func<IFlashMapperDependencyResolver, TService> serviceRegistration) where TService : class, IFlashMapperService
        {
            internalConfigurator.RegisterService(serviceRegistration);
            return this;
        }
    }
    public class FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination> : IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination>
    {
        private readonly IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9>, TDestination> internalConfigurator;

        public FlashMapperMappingConfigurator(IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9>, TDestination> internalConfigurator)
        {
            this.internalConfigurator = internalConfigurator;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination> UnresolvedBehavior(UnresolvedPropertyBehavior unresolvedPropertyBehavior)
        {
            internalConfigurator.UnresolvedBehavior(unresolvedPropertyBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination> CollisionBehavior(SelectSourceCollisionBehavior selectSourceCollisionBehavior)
        {
            internalConfigurator.CollisionBehavior(selectSourceCollisionBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination> SourceNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.SourceNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination> SourceNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.SourceNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination> DestinationNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.DestinationNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination> DestinationNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.DestinationNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination> AfterMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination> afterMapCallback)
        {
            internalConfigurator.AfterMap((w, d) => afterMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, w.Source7, w.Source8, w.Source9, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination> BeforeMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination> beforeMapCallback)
        {
            internalConfigurator.BeforeMap((w, d) => beforeMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, w.Source7, w.Source8, w.Source9, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination> RegisterService<TService>(Func<IFlashMapperDependencyResolver, TService> serviceRegistration) where TService : class, IFlashMapperService
        {
            internalConfigurator.RegisterService(serviceRegistration);
            return this;
        }
    }
    public class FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination> : IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination>
    {
        private readonly IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10>, TDestination> internalConfigurator;

        public FlashMapperMappingConfigurator(IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10>, TDestination> internalConfigurator)
        {
            this.internalConfigurator = internalConfigurator;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination> UnresolvedBehavior(UnresolvedPropertyBehavior unresolvedPropertyBehavior)
        {
            internalConfigurator.UnresolvedBehavior(unresolvedPropertyBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination> CollisionBehavior(SelectSourceCollisionBehavior selectSourceCollisionBehavior)
        {
            internalConfigurator.CollisionBehavior(selectSourceCollisionBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination> SourceNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.SourceNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination> SourceNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.SourceNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination> DestinationNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.DestinationNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination> DestinationNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.DestinationNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination> AfterMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination> afterMapCallback)
        {
            internalConfigurator.AfterMap((w, d) => afterMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, w.Source7, w.Source8, w.Source9, w.Source10, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination> BeforeMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination> beforeMapCallback)
        {
            internalConfigurator.BeforeMap((w, d) => beforeMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, w.Source7, w.Source8, w.Source9, w.Source10, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination> RegisterService<TService>(Func<IFlashMapperDependencyResolver, TService> serviceRegistration) where TService : class, IFlashMapperService
        {
            internalConfigurator.RegisterService(serviceRegistration);
            return this;
        }
    }
    public class FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination> : IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination>
    {
        private readonly IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11>, TDestination> internalConfigurator;

        public FlashMapperMappingConfigurator(IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11>, TDestination> internalConfigurator)
        {
            this.internalConfigurator = internalConfigurator;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination> UnresolvedBehavior(UnresolvedPropertyBehavior unresolvedPropertyBehavior)
        {
            internalConfigurator.UnresolvedBehavior(unresolvedPropertyBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination> CollisionBehavior(SelectSourceCollisionBehavior selectSourceCollisionBehavior)
        {
            internalConfigurator.CollisionBehavior(selectSourceCollisionBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination> SourceNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.SourceNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination> SourceNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.SourceNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination> DestinationNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.DestinationNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination> DestinationNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.DestinationNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination> AfterMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination> afterMapCallback)
        {
            internalConfigurator.AfterMap((w, d) => afterMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, w.Source7, w.Source8, w.Source9, w.Source10, w.Source11, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination> BeforeMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination> beforeMapCallback)
        {
            internalConfigurator.BeforeMap((w, d) => beforeMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, w.Source7, w.Source8, w.Source9, w.Source10, w.Source11, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination> RegisterService<TService>(Func<IFlashMapperDependencyResolver, TService> serviceRegistration) where TService : class, IFlashMapperService
        {
            internalConfigurator.RegisterService(serviceRegistration);
            return this;
        }
    }
    public class FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination> : IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination>
    {
        private readonly IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12>, TDestination> internalConfigurator;

        public FlashMapperMappingConfigurator(IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12>, TDestination> internalConfigurator)
        {
            this.internalConfigurator = internalConfigurator;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination> UnresolvedBehavior(UnresolvedPropertyBehavior unresolvedPropertyBehavior)
        {
            internalConfigurator.UnresolvedBehavior(unresolvedPropertyBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination> CollisionBehavior(SelectSourceCollisionBehavior selectSourceCollisionBehavior)
        {
            internalConfigurator.CollisionBehavior(selectSourceCollisionBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination> SourceNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.SourceNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination> SourceNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.SourceNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination> DestinationNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.DestinationNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination> DestinationNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.DestinationNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination> AfterMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination> afterMapCallback)
        {
            internalConfigurator.AfterMap((w, d) => afterMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, w.Source7, w.Source8, w.Source9, w.Source10, w.Source11, w.Source12, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination> BeforeMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination> beforeMapCallback)
        {
            internalConfigurator.BeforeMap((w, d) => beforeMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, w.Source7, w.Source8, w.Source9, w.Source10, w.Source11, w.Source12, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination> RegisterService<TService>(Func<IFlashMapperDependencyResolver, TService> serviceRegistration) where TService : class, IFlashMapperService
        {
            internalConfigurator.RegisterService(serviceRegistration);
            return this;
        }
    }
    public class FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination> : IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination>
    {
        private readonly IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13>, TDestination> internalConfigurator;

        public FlashMapperMappingConfigurator(IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13>, TDestination> internalConfigurator)
        {
            this.internalConfigurator = internalConfigurator;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination> UnresolvedBehavior(UnresolvedPropertyBehavior unresolvedPropertyBehavior)
        {
            internalConfigurator.UnresolvedBehavior(unresolvedPropertyBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination> CollisionBehavior(SelectSourceCollisionBehavior selectSourceCollisionBehavior)
        {
            internalConfigurator.CollisionBehavior(selectSourceCollisionBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination> SourceNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.SourceNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination> SourceNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.SourceNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination> DestinationNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.DestinationNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination> DestinationNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.DestinationNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination> AfterMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination> afterMapCallback)
        {
            internalConfigurator.AfterMap((w, d) => afterMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, w.Source7, w.Source8, w.Source9, w.Source10, w.Source11, w.Source12, w.Source13, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination> BeforeMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination> beforeMapCallback)
        {
            internalConfigurator.BeforeMap((w, d) => beforeMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, w.Source7, w.Source8, w.Source9, w.Source10, w.Source11, w.Source12, w.Source13, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination> RegisterService<TService>(Func<IFlashMapperDependencyResolver, TService> serviceRegistration) where TService : class, IFlashMapperService
        {
            internalConfigurator.RegisterService(serviceRegistration);
            return this;
        }
    }
    public class FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination> : IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination>
    {
        private readonly IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14>, TDestination> internalConfigurator;

        public FlashMapperMappingConfigurator(IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14>, TDestination> internalConfigurator)
        {
            this.internalConfigurator = internalConfigurator;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination> UnresolvedBehavior(UnresolvedPropertyBehavior unresolvedPropertyBehavior)
        {
            internalConfigurator.UnresolvedBehavior(unresolvedPropertyBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination> CollisionBehavior(SelectSourceCollisionBehavior selectSourceCollisionBehavior)
        {
            internalConfigurator.CollisionBehavior(selectSourceCollisionBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination> SourceNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.SourceNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination> SourceNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.SourceNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination> DestinationNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.DestinationNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination> DestinationNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.DestinationNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination> AfterMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination> afterMapCallback)
        {
            internalConfigurator.AfterMap((w, d) => afterMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, w.Source7, w.Source8, w.Source9, w.Source10, w.Source11, w.Source12, w.Source13, w.Source14, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination> BeforeMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination> beforeMapCallback)
        {
            internalConfigurator.BeforeMap((w, d) => beforeMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, w.Source7, w.Source8, w.Source9, w.Source10, w.Source11, w.Source12, w.Source13, w.Source14, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination> RegisterService<TService>(Func<IFlashMapperDependencyResolver, TService> serviceRegistration) where TService : class, IFlashMapperService
        {
            internalConfigurator.RegisterService(serviceRegistration);
            return this;
        }
    }
    public class FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination> : IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination>
    {
        private readonly IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15>, TDestination> internalConfigurator;

        public FlashMapperMappingConfigurator(IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15>, TDestination> internalConfigurator)
        {
            this.internalConfigurator = internalConfigurator;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination> UnresolvedBehavior(UnresolvedPropertyBehavior unresolvedPropertyBehavior)
        {
            internalConfigurator.UnresolvedBehavior(unresolvedPropertyBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination> CollisionBehavior(SelectSourceCollisionBehavior selectSourceCollisionBehavior)
        {
            internalConfigurator.CollisionBehavior(selectSourceCollisionBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination> SourceNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.SourceNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination> SourceNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.SourceNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination> DestinationNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.DestinationNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination> DestinationNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.DestinationNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination> AfterMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination> afterMapCallback)
        {
            internalConfigurator.AfterMap((w, d) => afterMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, w.Source7, w.Source8, w.Source9, w.Source10, w.Source11, w.Source12, w.Source13, w.Source14, w.Source15, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination> BeforeMap(Action<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination> beforeMapCallback)
        {
            internalConfigurator.BeforeMap((w, d) => beforeMapCallback(w.Source1, w.Source2, w.Source3, w.Source4, w.Source5, w.Source6, w.Source7, w.Source8, w.Source9, w.Source10, w.Source11, w.Source12, w.Source13, w.Source14, w.Source15, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination> RegisterService<TService>(Func<IFlashMapperDependencyResolver, TService> serviceRegistration) where TService : class, IFlashMapperService
        {
            internalConfigurator.RegisterService(serviceRegistration);
            return this;
        }
    }
}