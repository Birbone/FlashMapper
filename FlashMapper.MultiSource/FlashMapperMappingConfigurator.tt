<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
	var maxNumberOfSources = 15;
	var sourceTypePrefix = "Source";
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq.Expressions;
using FlashMapper.Models;
using FlashMapper.Services;
using FlashMapper.Internal.Utils;

namespace FlashMapper.MultiSource
{
<#  for (var i = 1; i < maxNumberOfSources; i++)
    {
		var sourcesTypesString = string.Join(", ", Enumerable.Range(1, i + 1)
			.Select(n => "T" + sourceTypePrefix  + n));
		
		var sourcesFromWrapString = string.Join(", ", Enumerable.Range(1, i + 1)
			.Select(n => "w." + sourceTypePrefix  + n));
#>
    public class FlashMapperMappingConfigurator<<#= sourcesTypesString#>, TDestination> : IFlashMapperMappingConfigurator<<#= sourcesTypesString#>, TDestination>
    {
        private readonly IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<<#= sourcesTypesString#>>, TDestination> internalConfigurator;

        public FlashMapperMappingConfigurator(IFlashMapperMappingConfigurator<FlashMapperMultiSourceWrap<<#= sourcesTypesString#>>, TDestination> internalConfigurator)
        {
            this.internalConfigurator = internalConfigurator;
        }

        public IFlashMapperMappingConfigurator<<#= sourcesTypesString#>, TDestination> UnresolvedBehavior(UnresolvedPropertyBehavior unresolvedPropertyBehavior)
        {
            internalConfigurator.UnresolvedBehavior(unresolvedPropertyBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<<#= sourcesTypesString#>, TDestination> CollisionBehavior(SelectSourceCollisionBehavior selectSourceCollisionBehavior)
        {
            internalConfigurator.CollisionBehavior(selectSourceCollisionBehavior);
            return this;
        }

        public IFlashMapperMappingConfigurator<<#= sourcesTypesString#>, TDestination> SourceNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.SourceNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<<#= sourcesTypesString#>, TDestination> SourceNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.SourceNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<<#= sourcesTypesString#>, TDestination> DestinationNamingConvention(INamingConvention namingConvention)
        {
            internalConfigurator.DestinationNamingConvention(namingConvention);
            return this;
        }

        public IFlashMapperMappingConfigurator<<#= sourcesTypesString#>, TDestination> DestinationNamingConvention(NamingConventionType namingConventionType,
            params string[] prefixes)
        {
            internalConfigurator.DestinationNamingConvention(namingConventionType, prefixes);
            return this;
        }

        public IFlashMapperMappingConfigurator<<#= sourcesTypesString#>, TDestination> AfterMap(Action<<#= sourcesTypesString#>, TDestination> afterMapCallback)
        {
            internalConfigurator.AfterMap((w, d) => afterMapCallback(<#= sourcesFromWrapString#>, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<<#= sourcesTypesString#>, TDestination> BeforeMap(Action<<#= sourcesTypesString#>, TDestination> beforeMapCallback)
        {
            internalConfigurator.BeforeMap((w, d) => beforeMapCallback(<#= sourcesFromWrapString#>, d));
            return this;
        }

        public IFlashMapperMappingConfigurator<<#= sourcesTypesString#>, TDestination> RegisterService<TService>(Func<IFlashMapperDependencyResolver, TService> serviceRegistration) where TService : class, IFlashMapperService
        {
            internalConfigurator.RegisterService(serviceRegistration);
            return this;
        }
    }
<#  } #>
}