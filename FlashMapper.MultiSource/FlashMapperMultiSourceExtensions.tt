<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
	var maxNumberOfSources = 15;
	var sourceTypePrefix = "Source";
	var sourceVariablePrefix = "source";
#>
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
using System;
using System.Linq.Expressions;
using FlashMapper.MultiSource;
using FlashMapper.Services.GeneratingMappings;
using FlashMapper.Services.MatchingProperties;

namespace FlashMapper
{
    public static class FlashMapperMultiSourceExtensions
    {
<#  for (var i = 1; i < maxNumberOfSources; i++)
    {
		var sourcesTypesString = string.Join(", ", Enumerable.Range(1, i + 1)
			.Select(n => $"T{sourceTypePrefix}{n}"));
		var sourceParametersString = string.Join(", ", Enumerable.Range(1, i + 1)
			.Select(n => $"{sourceVariablePrefix}{n}"));
		var sourceMethodParametersString = string.Join(", ", Enumerable.Range(1, i + 1)
			.Select(n => $"T{sourceTypePrefix}{n} {sourceVariablePrefix}{n}"));
#>
        public static void CreateMapping<<#= sourcesTypesString#>, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<<#= sourcesTypesString#>, TDestination>> mappingExpression)
        {
            CreateMapping(mappingConfiguration, mappingExpression, s => s, c => c);
        }

        public static void CreateMapping<<#= sourcesTypesString#>, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<<#= sourcesTypesString#>, TDestination>> mappingExpression,
            Func<IFlashMapperSettingsBuilder, IFlashMapperSettingsBuilder> settings)
        {
            CreateMapping(mappingConfiguration, mappingExpression, settings, c => c);
        }

        public static void CreateMapping<<#= sourcesTypesString#>, TDestination>(
            this IMappingConfiguration mappingConfiguration,
            Expression<Func<<#= sourcesTypesString#>, TDestination>> mappingExpression,
            Func<IFlashMapperSettingsBuilder, IFlashMapperSettingsBuilder> settings,
            Func<IFlashMapperCustomServiceBuilder, IFlashMapperCustomServiceBuilder> customServicesRegistration)
        {
            var converter = new MultiSourceMappingExpressionConverter<<#= sourcesTypesString#>, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            mappingConfiguration.CreateMapping(singleSourceExpression, settings, c => 
				customServicesRegistration(c.RegisterService<IAutomaticPropertyValueExpressionResolver>(r => new MultiSourceAutomaticPropertyValueExpressionResolver(r.GetService<IPropertyNameComparer>()))));
        }

        public static void MapData<<#= sourcesTypesString#>, TDestination>(this IMappingConfiguration mappingConfiguration, <#= sourceMethodParametersString#>, TDestination destination)
        {
            mappingConfiguration.MapData(new FlashMapperMultiSourceWrap<<#= sourcesTypesString#>>(<#= sourceParametersString#>), destination);
        }

        public static TDestination Convert<<#= sourcesTypesString#>, TDestination>(this IMappingConfiguration mappingConfiguration, <#= sourceMethodParametersString#>)
        {
            return mappingConfiguration.Convert<FlashMapperMultiSourceWrap<<#= sourcesTypesString#>>, TDestination>(new FlashMapperMultiSourceWrap<<#= sourcesTypesString#>>(<#= sourceParametersString#>));
        }

		public static IFlashMapperGenericConverter Convert<<#= sourcesTypesString#>>(this IMappingConfiguration mappingConfiguration, <#= sourceMethodParametersString#>)
        {
            return new FlashMapperGenericConverter<<#= sourcesTypesString#>>(mappingConfiguration, <#= sourceParametersString#>);
        }
<#  } #>
    }
}