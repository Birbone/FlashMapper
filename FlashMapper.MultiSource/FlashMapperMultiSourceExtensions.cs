//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq.Expressions;
using FlashMapper.MultiSource;
using FlashMapper.Services.GeneratingMappings;
using FlashMapper.Services.MatchingProperties;
using FlashMapper.Models;

namespace FlashMapper
{
    public static class FlashMapperMultiSourceExtensions
    {
        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TDestination>> mappingExpression)
        {
            return CreateMapping(mappingConfiguration, mappingExpression, s => s);
        }

        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TDestination>> mappingExpression,
            Func<IFlashMapperMappingConfigurator<TSource1, TSource2, TDestination>, IFlashMapperMappingConfigurator<TSource1, TSource2, TDestination>> settings)
        {
		    var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            return mappingConfiguration.CreateMapping(singleSourceExpression, s =>
            {
                settings(new FlashMapperMappingConfigurator<TSource1, TSource2, TDestination>(s))
                    .RegisterService<IAutomaticPropertyValueExpressionResolver>(r =>
                        new MultiSourceAutomaticPropertyValueExpressionResolver(
                            r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()));
                return s;
            });
        }

		[Obsolete("Register custom services in settings.")]
        public static void CreateMapping<TSource1, TSource2, TDestination>(
            this IMappingConfiguration mappingConfiguration,
            Expression<Func<TSource1, TSource2, TDestination>> mappingExpression,
            Func<IFlashMapperSettingsBuilder, IFlashMapperSettingsBuilder> settings,
            Func<IFlashMapperCustomServiceBuilder, IFlashMapperCustomServiceBuilder> customServicesRegistration)
        {
            var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            mappingConfiguration.CreateMapping(singleSourceExpression, settings, c => 
				customServicesRegistration(c.RegisterService<IAutomaticPropertyValueExpressionResolver>(r => new MultiSourceAutomaticPropertyValueExpressionResolver(r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()))));
        }

        public static void MapData<TSource1, TSource2, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TDestination destination)
        {
            mappingConfiguration.MapData(new FlashMapperMultiSourceWrap<TSource1, TSource2>(source1, source2), destination);
        }

        public static TDestination Convert<TSource1, TSource2, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2)
        {
            return mappingConfiguration.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2>, TDestination>(new FlashMapperMultiSourceWrap<TSource1, TSource2>(source1, source2));
        }

		public static IFlashMapperGenericConverter Convert<TSource1, TSource2>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2)
        {
            return new FlashMapperGenericConverter<TSource1, TSource2>(mappingConfiguration, source1, source2);
        }
        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TDestination>> mappingExpression)
        {
            return CreateMapping(mappingConfiguration, mappingExpression, s => s);
        }

        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TDestination>> mappingExpression,
            Func<IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TDestination>, IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TDestination>> settings)
        {
		    var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            return mappingConfiguration.CreateMapping(singleSourceExpression, s =>
            {
                settings(new FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TDestination>(s))
                    .RegisterService<IAutomaticPropertyValueExpressionResolver>(r =>
                        new MultiSourceAutomaticPropertyValueExpressionResolver(
                            r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()));
                return s;
            });
        }

		[Obsolete("Register custom services in settings.")]
        public static void CreateMapping<TSource1, TSource2, TSource3, TDestination>(
            this IMappingConfiguration mappingConfiguration,
            Expression<Func<TSource1, TSource2, TSource3, TDestination>> mappingExpression,
            Func<IFlashMapperSettingsBuilder, IFlashMapperSettingsBuilder> settings,
            Func<IFlashMapperCustomServiceBuilder, IFlashMapperCustomServiceBuilder> customServicesRegistration)
        {
            var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            mappingConfiguration.CreateMapping(singleSourceExpression, settings, c => 
				customServicesRegistration(c.RegisterService<IAutomaticPropertyValueExpressionResolver>(r => new MultiSourceAutomaticPropertyValueExpressionResolver(r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()))));
        }

        public static void MapData<TSource1, TSource2, TSource3, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TDestination destination)
        {
            mappingConfiguration.MapData(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3>(source1, source2, source3), destination);
        }

        public static TDestination Convert<TSource1, TSource2, TSource3, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3)
        {
            return mappingConfiguration.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3>, TDestination>(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3>(source1, source2, source3));
        }

		public static IFlashMapperGenericConverter Convert<TSource1, TSource2, TSource3>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3)
        {
            return new FlashMapperGenericConverter<TSource1, TSource2, TSource3>(mappingConfiguration, source1, source2, source3);
        }
        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TDestination>> mappingExpression)
        {
            return CreateMapping(mappingConfiguration, mappingExpression, s => s);
        }

        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TDestination>> mappingExpression,
            Func<IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TDestination>, IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TDestination>> settings)
        {
		    var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            return mappingConfiguration.CreateMapping(singleSourceExpression, s =>
            {
                settings(new FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TDestination>(s))
                    .RegisterService<IAutomaticPropertyValueExpressionResolver>(r =>
                        new MultiSourceAutomaticPropertyValueExpressionResolver(
                            r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()));
                return s;
            });
        }

		[Obsolete("Register custom services in settings.")]
        public static void CreateMapping<TSource1, TSource2, TSource3, TSource4, TDestination>(
            this IMappingConfiguration mappingConfiguration,
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TDestination>> mappingExpression,
            Func<IFlashMapperSettingsBuilder, IFlashMapperSettingsBuilder> settings,
            Func<IFlashMapperCustomServiceBuilder, IFlashMapperCustomServiceBuilder> customServicesRegistration)
        {
            var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            mappingConfiguration.CreateMapping(singleSourceExpression, settings, c => 
				customServicesRegistration(c.RegisterService<IAutomaticPropertyValueExpressionResolver>(r => new MultiSourceAutomaticPropertyValueExpressionResolver(r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()))));
        }

        public static void MapData<TSource1, TSource2, TSource3, TSource4, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TDestination destination)
        {
            mappingConfiguration.MapData(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4>(source1, source2, source3, source4), destination);
        }

        public static TDestination Convert<TSource1, TSource2, TSource3, TSource4, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4)
        {
            return mappingConfiguration.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4>, TDestination>(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4>(source1, source2, source3, source4));
        }

		public static IFlashMapperGenericConverter Convert<TSource1, TSource2, TSource3, TSource4>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4)
        {
            return new FlashMapperGenericConverter<TSource1, TSource2, TSource3, TSource4>(mappingConfiguration, source1, source2, source3, source4);
        }
        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination>> mappingExpression)
        {
            return CreateMapping(mappingConfiguration, mappingExpression, s => s);
        }

        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination>> mappingExpression,
            Func<IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination>, IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination>> settings)
        {
		    var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            return mappingConfiguration.CreateMapping(singleSourceExpression, s =>
            {
                settings(new FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination>(s))
                    .RegisterService<IAutomaticPropertyValueExpressionResolver>(r =>
                        new MultiSourceAutomaticPropertyValueExpressionResolver(
                            r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()));
                return s;
            });
        }

		[Obsolete("Register custom services in settings.")]
        public static void CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination>(
            this IMappingConfiguration mappingConfiguration,
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination>> mappingExpression,
            Func<IFlashMapperSettingsBuilder, IFlashMapperSettingsBuilder> settings,
            Func<IFlashMapperCustomServiceBuilder, IFlashMapperCustomServiceBuilder> customServicesRegistration)
        {
            var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            mappingConfiguration.CreateMapping(singleSourceExpression, settings, c => 
				customServicesRegistration(c.RegisterService<IAutomaticPropertyValueExpressionResolver>(r => new MultiSourceAutomaticPropertyValueExpressionResolver(r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()))));
        }

        public static void MapData<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TDestination destination)
        {
            mappingConfiguration.MapData(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5>(source1, source2, source3, source4, source5), destination);
        }

        public static TDestination Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5)
        {
            return mappingConfiguration.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5>, TDestination>(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5>(source1, source2, source3, source4, source5));
        }

		public static IFlashMapperGenericConverter Convert<TSource1, TSource2, TSource3, TSource4, TSource5>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5)
        {
            return new FlashMapperGenericConverter<TSource1, TSource2, TSource3, TSource4, TSource5>(mappingConfiguration, source1, source2, source3, source4, source5);
        }
        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination>> mappingExpression)
        {
            return CreateMapping(mappingConfiguration, mappingExpression, s => s);
        }

        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination>> mappingExpression,
            Func<IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination>, IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination>> settings)
        {
		    var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            return mappingConfiguration.CreateMapping(singleSourceExpression, s =>
            {
                settings(new FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination>(s))
                    .RegisterService<IAutomaticPropertyValueExpressionResolver>(r =>
                        new MultiSourceAutomaticPropertyValueExpressionResolver(
                            r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()));
                return s;
            });
        }

		[Obsolete("Register custom services in settings.")]
        public static void CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination>(
            this IMappingConfiguration mappingConfiguration,
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination>> mappingExpression,
            Func<IFlashMapperSettingsBuilder, IFlashMapperSettingsBuilder> settings,
            Func<IFlashMapperCustomServiceBuilder, IFlashMapperCustomServiceBuilder> customServicesRegistration)
        {
            var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            mappingConfiguration.CreateMapping(singleSourceExpression, settings, c => 
				customServicesRegistration(c.RegisterService<IAutomaticPropertyValueExpressionResolver>(r => new MultiSourceAutomaticPropertyValueExpressionResolver(r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()))));
        }

        public static void MapData<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TDestination destination)
        {
            mappingConfiguration.MapData(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>(source1, source2, source3, source4, source5, source6), destination);
        }

        public static TDestination Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6)
        {
            return mappingConfiguration.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>, TDestination>(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>(source1, source2, source3, source4, source5, source6));
        }

		public static IFlashMapperGenericConverter Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6)
        {
            return new FlashMapperGenericConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>(mappingConfiguration, source1, source2, source3, source4, source5, source6);
        }
        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination>> mappingExpression)
        {
            return CreateMapping(mappingConfiguration, mappingExpression, s => s);
        }

        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination>> mappingExpression,
            Func<IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination>, IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination>> settings)
        {
		    var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            return mappingConfiguration.CreateMapping(singleSourceExpression, s =>
            {
                settings(new FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination>(s))
                    .RegisterService<IAutomaticPropertyValueExpressionResolver>(r =>
                        new MultiSourceAutomaticPropertyValueExpressionResolver(
                            r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()));
                return s;
            });
        }

		[Obsolete("Register custom services in settings.")]
        public static void CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination>(
            this IMappingConfiguration mappingConfiguration,
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination>> mappingExpression,
            Func<IFlashMapperSettingsBuilder, IFlashMapperSettingsBuilder> settings,
            Func<IFlashMapperCustomServiceBuilder, IFlashMapperCustomServiceBuilder> customServicesRegistration)
        {
            var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            mappingConfiguration.CreateMapping(singleSourceExpression, settings, c => 
				customServicesRegistration(c.RegisterService<IAutomaticPropertyValueExpressionResolver>(r => new MultiSourceAutomaticPropertyValueExpressionResolver(r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()))));
        }

        public static void MapData<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TDestination destination)
        {
            mappingConfiguration.MapData(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>(source1, source2, source3, source4, source5, source6, source7), destination);
        }

        public static TDestination Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7)
        {
            return mappingConfiguration.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>, TDestination>(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>(source1, source2, source3, source4, source5, source6, source7));
        }

		public static IFlashMapperGenericConverter Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7)
        {
            return new FlashMapperGenericConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>(mappingConfiguration, source1, source2, source3, source4, source5, source6, source7);
        }
        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination>> mappingExpression)
        {
            return CreateMapping(mappingConfiguration, mappingExpression, s => s);
        }

        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination>> mappingExpression,
            Func<IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination>, IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination>> settings)
        {
		    var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            return mappingConfiguration.CreateMapping(singleSourceExpression, s =>
            {
                settings(new FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination>(s))
                    .RegisterService<IAutomaticPropertyValueExpressionResolver>(r =>
                        new MultiSourceAutomaticPropertyValueExpressionResolver(
                            r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()));
                return s;
            });
        }

		[Obsolete("Register custom services in settings.")]
        public static void CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination>(
            this IMappingConfiguration mappingConfiguration,
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination>> mappingExpression,
            Func<IFlashMapperSettingsBuilder, IFlashMapperSettingsBuilder> settings,
            Func<IFlashMapperCustomServiceBuilder, IFlashMapperCustomServiceBuilder> customServicesRegistration)
        {
            var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            mappingConfiguration.CreateMapping(singleSourceExpression, settings, c => 
				customServicesRegistration(c.RegisterService<IAutomaticPropertyValueExpressionResolver>(r => new MultiSourceAutomaticPropertyValueExpressionResolver(r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()))));
        }

        public static void MapData<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TDestination destination)
        {
            mappingConfiguration.MapData(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8>(source1, source2, source3, source4, source5, source6, source7, source8), destination);
        }

        public static TDestination Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8)
        {
            return mappingConfiguration.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8>, TDestination>(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8>(source1, source2, source3, source4, source5, source6, source7, source8));
        }

		public static IFlashMapperGenericConverter Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8)
        {
            return new FlashMapperGenericConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8>(mappingConfiguration, source1, source2, source3, source4, source5, source6, source7, source8);
        }
        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination>> mappingExpression)
        {
            return CreateMapping(mappingConfiguration, mappingExpression, s => s);
        }

        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination>> mappingExpression,
            Func<IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination>, IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination>> settings)
        {
		    var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            return mappingConfiguration.CreateMapping(singleSourceExpression, s =>
            {
                settings(new FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination>(s))
                    .RegisterService<IAutomaticPropertyValueExpressionResolver>(r =>
                        new MultiSourceAutomaticPropertyValueExpressionResolver(
                            r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()));
                return s;
            });
        }

		[Obsolete("Register custom services in settings.")]
        public static void CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination>(
            this IMappingConfiguration mappingConfiguration,
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination>> mappingExpression,
            Func<IFlashMapperSettingsBuilder, IFlashMapperSettingsBuilder> settings,
            Func<IFlashMapperCustomServiceBuilder, IFlashMapperCustomServiceBuilder> customServicesRegistration)
        {
            var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            mappingConfiguration.CreateMapping(singleSourceExpression, settings, c => 
				customServicesRegistration(c.RegisterService<IAutomaticPropertyValueExpressionResolver>(r => new MultiSourceAutomaticPropertyValueExpressionResolver(r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()))));
        }

        public static void MapData<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TDestination destination)
        {
            mappingConfiguration.MapData(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9>(source1, source2, source3, source4, source5, source6, source7, source8, source9), destination);
        }

        public static TDestination Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9)
        {
            return mappingConfiguration.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9>, TDestination>(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9>(source1, source2, source3, source4, source5, source6, source7, source8, source9));
        }

		public static IFlashMapperGenericConverter Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9)
        {
            return new FlashMapperGenericConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9>(mappingConfiguration, source1, source2, source3, source4, source5, source6, source7, source8, source9);
        }
        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination>> mappingExpression)
        {
            return CreateMapping(mappingConfiguration, mappingExpression, s => s);
        }

        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination>> mappingExpression,
            Func<IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination>, IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination>> settings)
        {
		    var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            return mappingConfiguration.CreateMapping(singleSourceExpression, s =>
            {
                settings(new FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination>(s))
                    .RegisterService<IAutomaticPropertyValueExpressionResolver>(r =>
                        new MultiSourceAutomaticPropertyValueExpressionResolver(
                            r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()));
                return s;
            });
        }

		[Obsolete("Register custom services in settings.")]
        public static void CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination>(
            this IMappingConfiguration mappingConfiguration,
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination>> mappingExpression,
            Func<IFlashMapperSettingsBuilder, IFlashMapperSettingsBuilder> settings,
            Func<IFlashMapperCustomServiceBuilder, IFlashMapperCustomServiceBuilder> customServicesRegistration)
        {
            var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            mappingConfiguration.CreateMapping(singleSourceExpression, settings, c => 
				customServicesRegistration(c.RegisterService<IAutomaticPropertyValueExpressionResolver>(r => new MultiSourceAutomaticPropertyValueExpressionResolver(r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()))));
        }

        public static void MapData<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TDestination destination)
        {
            mappingConfiguration.MapData(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10>(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10), destination);
        }

        public static TDestination Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10)
        {
            return mappingConfiguration.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10>, TDestination>(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10>(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10));
        }

		public static IFlashMapperGenericConverter Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10)
        {
            return new FlashMapperGenericConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10>(mappingConfiguration, source1, source2, source3, source4, source5, source6, source7, source8, source9, source10);
        }
        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination>> mappingExpression)
        {
            return CreateMapping(mappingConfiguration, mappingExpression, s => s);
        }

        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination>> mappingExpression,
            Func<IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination>, IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination>> settings)
        {
		    var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            return mappingConfiguration.CreateMapping(singleSourceExpression, s =>
            {
                settings(new FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination>(s))
                    .RegisterService<IAutomaticPropertyValueExpressionResolver>(r =>
                        new MultiSourceAutomaticPropertyValueExpressionResolver(
                            r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()));
                return s;
            });
        }

		[Obsolete("Register custom services in settings.")]
        public static void CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination>(
            this IMappingConfiguration mappingConfiguration,
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination>> mappingExpression,
            Func<IFlashMapperSettingsBuilder, IFlashMapperSettingsBuilder> settings,
            Func<IFlashMapperCustomServiceBuilder, IFlashMapperCustomServiceBuilder> customServicesRegistration)
        {
            var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            mappingConfiguration.CreateMapping(singleSourceExpression, settings, c => 
				customServicesRegistration(c.RegisterService<IAutomaticPropertyValueExpressionResolver>(r => new MultiSourceAutomaticPropertyValueExpressionResolver(r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()))));
        }

        public static void MapData<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TDestination destination)
        {
            mappingConfiguration.MapData(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11>(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11), destination);
        }

        public static TDestination Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11)
        {
            return mappingConfiguration.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11>, TDestination>(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11>(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11));
        }

		public static IFlashMapperGenericConverter Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11)
        {
            return new FlashMapperGenericConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11>(mappingConfiguration, source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11);
        }
        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination>> mappingExpression)
        {
            return CreateMapping(mappingConfiguration, mappingExpression, s => s);
        }

        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination>> mappingExpression,
            Func<IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination>, IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination>> settings)
        {
		    var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            return mappingConfiguration.CreateMapping(singleSourceExpression, s =>
            {
                settings(new FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination>(s))
                    .RegisterService<IAutomaticPropertyValueExpressionResolver>(r =>
                        new MultiSourceAutomaticPropertyValueExpressionResolver(
                            r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()));
                return s;
            });
        }

		[Obsolete("Register custom services in settings.")]
        public static void CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination>(
            this IMappingConfiguration mappingConfiguration,
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination>> mappingExpression,
            Func<IFlashMapperSettingsBuilder, IFlashMapperSettingsBuilder> settings,
            Func<IFlashMapperCustomServiceBuilder, IFlashMapperCustomServiceBuilder> customServicesRegistration)
        {
            var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            mappingConfiguration.CreateMapping(singleSourceExpression, settings, c => 
				customServicesRegistration(c.RegisterService<IAutomaticPropertyValueExpressionResolver>(r => new MultiSourceAutomaticPropertyValueExpressionResolver(r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()))));
        }

        public static void MapData<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TSource12 source12, TDestination destination)
        {
            mappingConfiguration.MapData(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12>(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, source12), destination);
        }

        public static TDestination Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TSource12 source12)
        {
            return mappingConfiguration.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12>, TDestination>(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12>(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, source12));
        }

		public static IFlashMapperGenericConverter Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TSource12 source12)
        {
            return new FlashMapperGenericConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12>(mappingConfiguration, source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, source12);
        }
        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination>> mappingExpression)
        {
            return CreateMapping(mappingConfiguration, mappingExpression, s => s);
        }

        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination>> mappingExpression,
            Func<IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination>, IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination>> settings)
        {
		    var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            return mappingConfiguration.CreateMapping(singleSourceExpression, s =>
            {
                settings(new FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination>(s))
                    .RegisterService<IAutomaticPropertyValueExpressionResolver>(r =>
                        new MultiSourceAutomaticPropertyValueExpressionResolver(
                            r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()));
                return s;
            });
        }

		[Obsolete("Register custom services in settings.")]
        public static void CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination>(
            this IMappingConfiguration mappingConfiguration,
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination>> mappingExpression,
            Func<IFlashMapperSettingsBuilder, IFlashMapperSettingsBuilder> settings,
            Func<IFlashMapperCustomServiceBuilder, IFlashMapperCustomServiceBuilder> customServicesRegistration)
        {
            var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            mappingConfiguration.CreateMapping(singleSourceExpression, settings, c => 
				customServicesRegistration(c.RegisterService<IAutomaticPropertyValueExpressionResolver>(r => new MultiSourceAutomaticPropertyValueExpressionResolver(r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()))));
        }

        public static void MapData<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TSource12 source12, TSource13 source13, TDestination destination)
        {
            mappingConfiguration.MapData(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13>(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, source12, source13), destination);
        }

        public static TDestination Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TSource12 source12, TSource13 source13)
        {
            return mappingConfiguration.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13>, TDestination>(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13>(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, source12, source13));
        }

		public static IFlashMapperGenericConverter Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TSource12 source12, TSource13 source13)
        {
            return new FlashMapperGenericConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13>(mappingConfiguration, source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, source12, source13);
        }
        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination>> mappingExpression)
        {
            return CreateMapping(mappingConfiguration, mappingExpression, s => s);
        }

        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination>> mappingExpression,
            Func<IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination>, IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination>> settings)
        {
		    var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            return mappingConfiguration.CreateMapping(singleSourceExpression, s =>
            {
                settings(new FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination>(s))
                    .RegisterService<IAutomaticPropertyValueExpressionResolver>(r =>
                        new MultiSourceAutomaticPropertyValueExpressionResolver(
                            r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()));
                return s;
            });
        }

		[Obsolete("Register custom services in settings.")]
        public static void CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination>(
            this IMappingConfiguration mappingConfiguration,
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination>> mappingExpression,
            Func<IFlashMapperSettingsBuilder, IFlashMapperSettingsBuilder> settings,
            Func<IFlashMapperCustomServiceBuilder, IFlashMapperCustomServiceBuilder> customServicesRegistration)
        {
            var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            mappingConfiguration.CreateMapping(singleSourceExpression, settings, c => 
				customServicesRegistration(c.RegisterService<IAutomaticPropertyValueExpressionResolver>(r => new MultiSourceAutomaticPropertyValueExpressionResolver(r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()))));
        }

        public static void MapData<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TSource12 source12, TSource13 source13, TSource14 source14, TDestination destination)
        {
            mappingConfiguration.MapData(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14>(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, source12, source13, source14), destination);
        }

        public static TDestination Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TSource12 source12, TSource13 source13, TSource14 source14)
        {
            return mappingConfiguration.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14>, TDestination>(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14>(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, source12, source13, source14));
        }

		public static IFlashMapperGenericConverter Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TSource12 source12, TSource13 source13, TSource14 source14)
        {
            return new FlashMapperGenericConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14>(mappingConfiguration, source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, source12, source13, source14);
        }
        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination>> mappingExpression)
        {
            return CreateMapping(mappingConfiguration, mappingExpression, s => s);
        }

        public static IMappingConfiguration CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination>(
            this IMappingConfiguration mappingConfiguration, 
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination>> mappingExpression,
            Func<IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination>, IFlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination>> settings)
        {
		    var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            return mappingConfiguration.CreateMapping(singleSourceExpression, s =>
            {
                settings(new FlashMapperMappingConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination>(s))
                    .RegisterService<IAutomaticPropertyValueExpressionResolver>(r =>
                        new MultiSourceAutomaticPropertyValueExpressionResolver(
                            r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()));
                return s;
            });
        }

		[Obsolete("Register custom services in settings.")]
        public static void CreateMapping<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination>(
            this IMappingConfiguration mappingConfiguration,
            Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination>> mappingExpression,
            Func<IFlashMapperSettingsBuilder, IFlashMapperSettingsBuilder> settings,
            Func<IFlashMapperCustomServiceBuilder, IFlashMapperCustomServiceBuilder> customServicesRegistration)
        {
            var converter = new MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination>(new InternalMultiSourceMappingExpressionConverter());
            var singleSourceExpression = converter.Convert(mappingExpression);
            mappingConfiguration.CreateMapping(singleSourceExpression, settings, c => 
				customServicesRegistration(c.RegisterService<IAutomaticPropertyValueExpressionResolver>(r => new MultiSourceAutomaticPropertyValueExpressionResolver(r.GetService<IPropertyNameComparer>(), r.GetService<IFlashMapperSettings>()))));
        }

        public static void MapData<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TSource12 source12, TSource13 source13, TSource14 source14, TSource15 source15, TDestination destination)
        {
            mappingConfiguration.MapData(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15>(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, source12, source13, source14, source15), destination);
        }

        public static TDestination Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TSource12 source12, TSource13 source13, TSource14 source14, TSource15 source15)
        {
            return mappingConfiguration.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15>, TDestination>(new FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15>(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, source12, source13, source14, source15));
        }

		public static IFlashMapperGenericConverter Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15>(this IMappingConfiguration mappingConfiguration, TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TSource12 source12, TSource13 source13, TSource14 source14, TSource15 source15)
        {
            return new FlashMapperGenericConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15>(mappingConfiguration, source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, source12, source13, source14, source15);
        }
    }
}