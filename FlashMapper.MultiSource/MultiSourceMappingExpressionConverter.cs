// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
using System;
using System.Linq.Expressions;

namespace FlashMapper.MultiSource
{
    public class MultiSourceMappingExpressionConverter<TSource1, TSource2, TDestination> : IMultiSourceMappingExpressionConverter<TSource1, TSource2, TDestination>
    {
        private readonly IInternalMultiSourceMappingExpressionConverter internalConverter;
        public MultiSourceMappingExpressionConverter(IInternalMultiSourceMappingExpressionConverter internalConverter)
        {
            this.internalConverter = internalConverter;
        }

        public Expression<Func<FlashMapperMultiSourceWrap<TSource1, TSource2>, TDestination>> Convert(Expression<Func<TSource1, TSource2, TDestination>> mappingExpression)
        {
            return internalConverter.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2>, TDestination>(mappingExpression);
        }
    }

    public class MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TDestination> : IMultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TDestination>
    {
        private readonly IInternalMultiSourceMappingExpressionConverter internalConverter;
        public MultiSourceMappingExpressionConverter(IInternalMultiSourceMappingExpressionConverter internalConverter)
        {
            this.internalConverter = internalConverter;
        }

        public Expression<Func<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3>, TDestination>> Convert(Expression<Func<TSource1, TSource2, TSource3, TDestination>> mappingExpression)
        {
            return internalConverter.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3>, TDestination>(mappingExpression);
        }
    }

    public class MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TDestination> : IMultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TDestination>
    {
        private readonly IInternalMultiSourceMappingExpressionConverter internalConverter;
        public MultiSourceMappingExpressionConverter(IInternalMultiSourceMappingExpressionConverter internalConverter)
        {
            this.internalConverter = internalConverter;
        }

        public Expression<Func<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4>, TDestination>> Convert(Expression<Func<TSource1, TSource2, TSource3, TSource4, TDestination>> mappingExpression)
        {
            return internalConverter.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4>, TDestination>(mappingExpression);
        }
    }

    public class MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination> : IMultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination>
    {
        private readonly IInternalMultiSourceMappingExpressionConverter internalConverter;
        public MultiSourceMappingExpressionConverter(IInternalMultiSourceMappingExpressionConverter internalConverter)
        {
            this.internalConverter = internalConverter;
        }

        public Expression<Func<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5>, TDestination>> Convert(Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination>> mappingExpression)
        {
            return internalConverter.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5>, TDestination>(mappingExpression);
        }
    }

    public class MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination> : IMultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination>
    {
        private readonly IInternalMultiSourceMappingExpressionConverter internalConverter;
        public MultiSourceMappingExpressionConverter(IInternalMultiSourceMappingExpressionConverter internalConverter)
        {
            this.internalConverter = internalConverter;
        }

        public Expression<Func<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>, TDestination>> Convert(Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination>> mappingExpression)
        {
            return internalConverter.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>, TDestination>(mappingExpression);
        }
    }

    public class MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination> : IMultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination>
    {
        private readonly IInternalMultiSourceMappingExpressionConverter internalConverter;
        public MultiSourceMappingExpressionConverter(IInternalMultiSourceMappingExpressionConverter internalConverter)
        {
            this.internalConverter = internalConverter;
        }

        public Expression<Func<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>, TDestination>> Convert(Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination>> mappingExpression)
        {
            return internalConverter.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>, TDestination>(mappingExpression);
        }
    }

    public class MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination> : IMultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination>
    {
        private readonly IInternalMultiSourceMappingExpressionConverter internalConverter;
        public MultiSourceMappingExpressionConverter(IInternalMultiSourceMappingExpressionConverter internalConverter)
        {
            this.internalConverter = internalConverter;
        }

        public Expression<Func<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8>, TDestination>> Convert(Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination>> mappingExpression)
        {
            return internalConverter.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8>, TDestination>(mappingExpression);
        }
    }

    public class MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination> : IMultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination>
    {
        private readonly IInternalMultiSourceMappingExpressionConverter internalConverter;
        public MultiSourceMappingExpressionConverter(IInternalMultiSourceMappingExpressionConverter internalConverter)
        {
            this.internalConverter = internalConverter;
        }

        public Expression<Func<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9>, TDestination>> Convert(Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination>> mappingExpression)
        {
            return internalConverter.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9>, TDestination>(mappingExpression);
        }
    }

    public class MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination> : IMultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination>
    {
        private readonly IInternalMultiSourceMappingExpressionConverter internalConverter;
        public MultiSourceMappingExpressionConverter(IInternalMultiSourceMappingExpressionConverter internalConverter)
        {
            this.internalConverter = internalConverter;
        }

        public Expression<Func<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10>, TDestination>> Convert(Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination>> mappingExpression)
        {
            return internalConverter.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10>, TDestination>(mappingExpression);
        }
    }

    public class MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination> : IMultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination>
    {
        private readonly IInternalMultiSourceMappingExpressionConverter internalConverter;
        public MultiSourceMappingExpressionConverter(IInternalMultiSourceMappingExpressionConverter internalConverter)
        {
            this.internalConverter = internalConverter;
        }

        public Expression<Func<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11>, TDestination>> Convert(Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination>> mappingExpression)
        {
            return internalConverter.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11>, TDestination>(mappingExpression);
        }
    }

    public class MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination> : IMultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination>
    {
        private readonly IInternalMultiSourceMappingExpressionConverter internalConverter;
        public MultiSourceMappingExpressionConverter(IInternalMultiSourceMappingExpressionConverter internalConverter)
        {
            this.internalConverter = internalConverter;
        }

        public Expression<Func<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12>, TDestination>> Convert(Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination>> mappingExpression)
        {
            return internalConverter.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12>, TDestination>(mappingExpression);
        }
    }

    public class MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination> : IMultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination>
    {
        private readonly IInternalMultiSourceMappingExpressionConverter internalConverter;
        public MultiSourceMappingExpressionConverter(IInternalMultiSourceMappingExpressionConverter internalConverter)
        {
            this.internalConverter = internalConverter;
        }

        public Expression<Func<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13>, TDestination>> Convert(Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination>> mappingExpression)
        {
            return internalConverter.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13>, TDestination>(mappingExpression);
        }
    }

    public class MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination> : IMultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination>
    {
        private readonly IInternalMultiSourceMappingExpressionConverter internalConverter;
        public MultiSourceMappingExpressionConverter(IInternalMultiSourceMappingExpressionConverter internalConverter)
        {
            this.internalConverter = internalConverter;
        }

        public Expression<Func<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14>, TDestination>> Convert(Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination>> mappingExpression)
        {
            return internalConverter.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14>, TDestination>(mappingExpression);
        }
    }

    public class MultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination> : IMultiSourceMappingExpressionConverter<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination>
    {
        private readonly IInternalMultiSourceMappingExpressionConverter internalConverter;
        public MultiSourceMappingExpressionConverter(IInternalMultiSourceMappingExpressionConverter internalConverter)
        {
            this.internalConverter = internalConverter;
        }

        public Expression<Func<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15>, TDestination>> Convert(Expression<Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TDestination>> mappingExpression)
        {
            return internalConverter.Convert<FlashMapperMultiSourceWrap<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15>, TDestination>(mappingExpression);
        }
    }

}