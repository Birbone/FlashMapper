//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq.Expressions;
using FlashMapper.DependencyInjection;

namespace FlashMapper
{
    public abstract class FlashMapperBuilder<TSource1, TDestination, TFlashMapperBuilder> : IBuilder<TSource1, TDestination>, IFlashMapperBuilder
        where TFlashMapperBuilder: FlashMapperBuilder<TSource1, TDestination, TFlashMapperBuilder>
    {
        private readonly IMappingConfiguration mappingConfiguration;
		
        protected FlashMapperBuilder(IMappingConfiguration mappingConfiguration)
        {
            this.mappingConfiguration = mappingConfiguration;
        }

        public TDestination Build(TSource1 source1)
        {
            return mappingConfiguration.Convert<TSource1, TFlashMapperBuilder, TDestination>(source1, (TFlashMapperBuilder) this);
        }

        public void MapData(TSource1 source1, TDestination destination)
        {
            mappingConfiguration.MapData(source1, (TFlashMapperBuilder)this, destination);
        }

        public void RegisterMapping()
        {
            var context = new FlashMapperBuilderConfiguratorContext();
            var configurator = new FlashMapperBuilderConfigurator<TSource1, TDestination, TFlashMapperBuilder>(context, (TFlashMapperBuilder)this);
            ConfigureMapping(configurator);
			ModuleConfiguration.MappingStepsConfigurator.ProcessSteps(context.Steps, mappingConfiguration, (TFlashMapperBuilder)this);
        }

        protected abstract void ConfigureMapping(IFlashMapperBuilderConfigurator<TSource1, TDestination> configurator);
    }

    public abstract class FlashMapperBuilder<TSource1, TSource2, TDestination, TFlashMapperBuilder> : IBuilder<TSource1, TSource2, TDestination>, IFlashMapperBuilder
        where TFlashMapperBuilder: FlashMapperBuilder<TSource1, TSource2, TDestination, TFlashMapperBuilder>
    {
        private readonly IMappingConfiguration mappingConfiguration;
		
        protected FlashMapperBuilder(IMappingConfiguration mappingConfiguration)
        {
            this.mappingConfiguration = mappingConfiguration;
        }

        public TDestination Build(TSource1 source1, TSource2 source2)
        {
            return mappingConfiguration.Convert<TSource1, TSource2, TFlashMapperBuilder, TDestination>(source1, source2, (TFlashMapperBuilder) this);
        }

        public void MapData(TSource1 source1, TSource2 source2, TDestination destination)
        {
            mappingConfiguration.MapData(source1, source2, (TFlashMapperBuilder)this, destination);
        }

        public void RegisterMapping()
        {
            var context = new FlashMapperBuilderConfiguratorContext();
            var configurator = new FlashMapperBuilderConfigurator<TSource1, TSource2, TDestination, TFlashMapperBuilder>(context, (TFlashMapperBuilder)this);
            ConfigureMapping(configurator);
			ModuleConfiguration.MappingStepsConfigurator.ProcessSteps(context.Steps, mappingConfiguration, (TFlashMapperBuilder)this);
        }

        protected abstract void ConfigureMapping(IFlashMapperBuilderConfigurator<TSource1, TSource2, TDestination> configurator);
    }

    public abstract class FlashMapperBuilder<TSource1, TSource2, TSource3, TDestination, TFlashMapperBuilder> : IBuilder<TSource1, TSource2, TSource3, TDestination>, IFlashMapperBuilder
        where TFlashMapperBuilder: FlashMapperBuilder<TSource1, TSource2, TSource3, TDestination, TFlashMapperBuilder>
    {
        private readonly IMappingConfiguration mappingConfiguration;
		
        protected FlashMapperBuilder(IMappingConfiguration mappingConfiguration)
        {
            this.mappingConfiguration = mappingConfiguration;
        }

        public TDestination Build(TSource1 source1, TSource2 source2, TSource3 source3)
        {
            return mappingConfiguration.Convert<TSource1, TSource2, TSource3, TFlashMapperBuilder, TDestination>(source1, source2, source3, (TFlashMapperBuilder) this);
        }

        public void MapData(TSource1 source1, TSource2 source2, TSource3 source3, TDestination destination)
        {
            mappingConfiguration.MapData(source1, source2, source3, (TFlashMapperBuilder)this, destination);
        }

        public void RegisterMapping()
        {
            var context = new FlashMapperBuilderConfiguratorContext();
            var configurator = new FlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TDestination, TFlashMapperBuilder>(context, (TFlashMapperBuilder)this);
            ConfigureMapping(configurator);
			ModuleConfiguration.MappingStepsConfigurator.ProcessSteps(context.Steps, mappingConfiguration, (TFlashMapperBuilder)this);
        }

        protected abstract void ConfigureMapping(IFlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TDestination> configurator);
    }

    public abstract class FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TDestination, TFlashMapperBuilder> : IBuilder<TSource1, TSource2, TSource3, TSource4, TDestination>, IFlashMapperBuilder
        where TFlashMapperBuilder: FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TDestination, TFlashMapperBuilder>
    {
        private readonly IMappingConfiguration mappingConfiguration;
		
        protected FlashMapperBuilder(IMappingConfiguration mappingConfiguration)
        {
            this.mappingConfiguration = mappingConfiguration;
        }

        public TDestination Build(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4)
        {
            return mappingConfiguration.Convert<TSource1, TSource2, TSource3, TSource4, TFlashMapperBuilder, TDestination>(source1, source2, source3, source4, (TFlashMapperBuilder) this);
        }

        public void MapData(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TDestination destination)
        {
            mappingConfiguration.MapData(source1, source2, source3, source4, (TFlashMapperBuilder)this, destination);
        }

        public void RegisterMapping()
        {
            var context = new FlashMapperBuilderConfiguratorContext();
            var configurator = new FlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TDestination, TFlashMapperBuilder>(context, (TFlashMapperBuilder)this);
            ConfigureMapping(configurator);
			ModuleConfiguration.MappingStepsConfigurator.ProcessSteps(context.Steps, mappingConfiguration, (TFlashMapperBuilder)this);
        }

        protected abstract void ConfigureMapping(IFlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TDestination> configurator);
    }

    public abstract class FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination, TFlashMapperBuilder> : IBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination>, IFlashMapperBuilder
        where TFlashMapperBuilder: FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination, TFlashMapperBuilder>
    {
        private readonly IMappingConfiguration mappingConfiguration;
		
        protected FlashMapperBuilder(IMappingConfiguration mappingConfiguration)
        {
            this.mappingConfiguration = mappingConfiguration;
        }

        public TDestination Build(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5)
        {
            return mappingConfiguration.Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TFlashMapperBuilder, TDestination>(source1, source2, source3, source4, source5, (TFlashMapperBuilder) this);
        }

        public void MapData(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TDestination destination)
        {
            mappingConfiguration.MapData(source1, source2, source3, source4, source5, (TFlashMapperBuilder)this, destination);
        }

        public void RegisterMapping()
        {
            var context = new FlashMapperBuilderConfiguratorContext();
            var configurator = new FlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination, TFlashMapperBuilder>(context, (TFlashMapperBuilder)this);
            ConfigureMapping(configurator);
			ModuleConfiguration.MappingStepsConfigurator.ProcessSteps(context.Steps, mappingConfiguration, (TFlashMapperBuilder)this);
        }

        protected abstract void ConfigureMapping(IFlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TDestination> configurator);
    }

    public abstract class FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination, TFlashMapperBuilder> : IBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination>, IFlashMapperBuilder
        where TFlashMapperBuilder: FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination, TFlashMapperBuilder>
    {
        private readonly IMappingConfiguration mappingConfiguration;
		
        protected FlashMapperBuilder(IMappingConfiguration mappingConfiguration)
        {
            this.mappingConfiguration = mappingConfiguration;
        }

        public TDestination Build(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6)
        {
            return mappingConfiguration.Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TFlashMapperBuilder, TDestination>(source1, source2, source3, source4, source5, source6, (TFlashMapperBuilder) this);
        }

        public void MapData(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TDestination destination)
        {
            mappingConfiguration.MapData(source1, source2, source3, source4, source5, source6, (TFlashMapperBuilder)this, destination);
        }

        public void RegisterMapping()
        {
            var context = new FlashMapperBuilderConfiguratorContext();
            var configurator = new FlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination, TFlashMapperBuilder>(context, (TFlashMapperBuilder)this);
            ConfigureMapping(configurator);
			ModuleConfiguration.MappingStepsConfigurator.ProcessSteps(context.Steps, mappingConfiguration, (TFlashMapperBuilder)this);
        }

        protected abstract void ConfigureMapping(IFlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TDestination> configurator);
    }

    public abstract class FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination, TFlashMapperBuilder> : IBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination>, IFlashMapperBuilder
        where TFlashMapperBuilder: FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination, TFlashMapperBuilder>
    {
        private readonly IMappingConfiguration mappingConfiguration;
		
        protected FlashMapperBuilder(IMappingConfiguration mappingConfiguration)
        {
            this.mappingConfiguration = mappingConfiguration;
        }

        public TDestination Build(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7)
        {
            return mappingConfiguration.Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TFlashMapperBuilder, TDestination>(source1, source2, source3, source4, source5, source6, source7, (TFlashMapperBuilder) this);
        }

        public void MapData(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TDestination destination)
        {
            mappingConfiguration.MapData(source1, source2, source3, source4, source5, source6, source7, (TFlashMapperBuilder)this, destination);
        }

        public void RegisterMapping()
        {
            var context = new FlashMapperBuilderConfiguratorContext();
            var configurator = new FlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination, TFlashMapperBuilder>(context, (TFlashMapperBuilder)this);
            ConfigureMapping(configurator);
			ModuleConfiguration.MappingStepsConfigurator.ProcessSteps(context.Steps, mappingConfiguration, (TFlashMapperBuilder)this);
        }

        protected abstract void ConfigureMapping(IFlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TDestination> configurator);
    }

    public abstract class FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination, TFlashMapperBuilder> : IBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination>, IFlashMapperBuilder
        where TFlashMapperBuilder: FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination, TFlashMapperBuilder>
    {
        private readonly IMappingConfiguration mappingConfiguration;
		
        protected FlashMapperBuilder(IMappingConfiguration mappingConfiguration)
        {
            this.mappingConfiguration = mappingConfiguration;
        }

        public TDestination Build(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8)
        {
            return mappingConfiguration.Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TFlashMapperBuilder, TDestination>(source1, source2, source3, source4, source5, source6, source7, source8, (TFlashMapperBuilder) this);
        }

        public void MapData(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TDestination destination)
        {
            mappingConfiguration.MapData(source1, source2, source3, source4, source5, source6, source7, source8, (TFlashMapperBuilder)this, destination);
        }

        public void RegisterMapping()
        {
            var context = new FlashMapperBuilderConfiguratorContext();
            var configurator = new FlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination, TFlashMapperBuilder>(context, (TFlashMapperBuilder)this);
            ConfigureMapping(configurator);
			ModuleConfiguration.MappingStepsConfigurator.ProcessSteps(context.Steps, mappingConfiguration, (TFlashMapperBuilder)this);
        }

        protected abstract void ConfigureMapping(IFlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TDestination> configurator);
    }

    public abstract class FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination, TFlashMapperBuilder> : IBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination>, IFlashMapperBuilder
        where TFlashMapperBuilder: FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination, TFlashMapperBuilder>
    {
        private readonly IMappingConfiguration mappingConfiguration;
		
        protected FlashMapperBuilder(IMappingConfiguration mappingConfiguration)
        {
            this.mappingConfiguration = mappingConfiguration;
        }

        public TDestination Build(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9)
        {
            return mappingConfiguration.Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TFlashMapperBuilder, TDestination>(source1, source2, source3, source4, source5, source6, source7, source8, source9, (TFlashMapperBuilder) this);
        }

        public void MapData(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TDestination destination)
        {
            mappingConfiguration.MapData(source1, source2, source3, source4, source5, source6, source7, source8, source9, (TFlashMapperBuilder)this, destination);
        }

        public void RegisterMapping()
        {
            var context = new FlashMapperBuilderConfiguratorContext();
            var configurator = new FlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination, TFlashMapperBuilder>(context, (TFlashMapperBuilder)this);
            ConfigureMapping(configurator);
			ModuleConfiguration.MappingStepsConfigurator.ProcessSteps(context.Steps, mappingConfiguration, (TFlashMapperBuilder)this);
        }

        protected abstract void ConfigureMapping(IFlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TDestination> configurator);
    }

    public abstract class FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination, TFlashMapperBuilder> : IBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination>, IFlashMapperBuilder
        where TFlashMapperBuilder: FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination, TFlashMapperBuilder>
    {
        private readonly IMappingConfiguration mappingConfiguration;
		
        protected FlashMapperBuilder(IMappingConfiguration mappingConfiguration)
        {
            this.mappingConfiguration = mappingConfiguration;
        }

        public TDestination Build(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10)
        {
            return mappingConfiguration.Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TFlashMapperBuilder, TDestination>(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, (TFlashMapperBuilder) this);
        }

        public void MapData(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TDestination destination)
        {
            mappingConfiguration.MapData(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, (TFlashMapperBuilder)this, destination);
        }

        public void RegisterMapping()
        {
            var context = new FlashMapperBuilderConfiguratorContext();
            var configurator = new FlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination, TFlashMapperBuilder>(context, (TFlashMapperBuilder)this);
            ConfigureMapping(configurator);
			ModuleConfiguration.MappingStepsConfigurator.ProcessSteps(context.Steps, mappingConfiguration, (TFlashMapperBuilder)this);
        }

        protected abstract void ConfigureMapping(IFlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TDestination> configurator);
    }

    public abstract class FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination, TFlashMapperBuilder> : IBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination>, IFlashMapperBuilder
        where TFlashMapperBuilder: FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination, TFlashMapperBuilder>
    {
        private readonly IMappingConfiguration mappingConfiguration;
		
        protected FlashMapperBuilder(IMappingConfiguration mappingConfiguration)
        {
            this.mappingConfiguration = mappingConfiguration;
        }

        public TDestination Build(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11)
        {
            return mappingConfiguration.Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TFlashMapperBuilder, TDestination>(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, (TFlashMapperBuilder) this);
        }

        public void MapData(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TDestination destination)
        {
            mappingConfiguration.MapData(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, (TFlashMapperBuilder)this, destination);
        }

        public void RegisterMapping()
        {
            var context = new FlashMapperBuilderConfiguratorContext();
            var configurator = new FlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination, TFlashMapperBuilder>(context, (TFlashMapperBuilder)this);
            ConfigureMapping(configurator);
			ModuleConfiguration.MappingStepsConfigurator.ProcessSteps(context.Steps, mappingConfiguration, (TFlashMapperBuilder)this);
        }

        protected abstract void ConfigureMapping(IFlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TDestination> configurator);
    }

    public abstract class FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination, TFlashMapperBuilder> : IBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination>, IFlashMapperBuilder
        where TFlashMapperBuilder: FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination, TFlashMapperBuilder>
    {
        private readonly IMappingConfiguration mappingConfiguration;
		
        protected FlashMapperBuilder(IMappingConfiguration mappingConfiguration)
        {
            this.mappingConfiguration = mappingConfiguration;
        }

        public TDestination Build(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TSource12 source12)
        {
            return mappingConfiguration.Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TFlashMapperBuilder, TDestination>(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, source12, (TFlashMapperBuilder) this);
        }

        public void MapData(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TSource12 source12, TDestination destination)
        {
            mappingConfiguration.MapData(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, source12, (TFlashMapperBuilder)this, destination);
        }

        public void RegisterMapping()
        {
            var context = new FlashMapperBuilderConfiguratorContext();
            var configurator = new FlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination, TFlashMapperBuilder>(context, (TFlashMapperBuilder)this);
            ConfigureMapping(configurator);
			ModuleConfiguration.MappingStepsConfigurator.ProcessSteps(context.Steps, mappingConfiguration, (TFlashMapperBuilder)this);
        }

        protected abstract void ConfigureMapping(IFlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TDestination> configurator);
    }

    public abstract class FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination, TFlashMapperBuilder> : IBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination>, IFlashMapperBuilder
        where TFlashMapperBuilder: FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination, TFlashMapperBuilder>
    {
        private readonly IMappingConfiguration mappingConfiguration;
		
        protected FlashMapperBuilder(IMappingConfiguration mappingConfiguration)
        {
            this.mappingConfiguration = mappingConfiguration;
        }

        public TDestination Build(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TSource12 source12, TSource13 source13)
        {
            return mappingConfiguration.Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TFlashMapperBuilder, TDestination>(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, source12, source13, (TFlashMapperBuilder) this);
        }

        public void MapData(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TSource12 source12, TSource13 source13, TDestination destination)
        {
            mappingConfiguration.MapData(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, source12, source13, (TFlashMapperBuilder)this, destination);
        }

        public void RegisterMapping()
        {
            var context = new FlashMapperBuilderConfiguratorContext();
            var configurator = new FlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination, TFlashMapperBuilder>(context, (TFlashMapperBuilder)this);
            ConfigureMapping(configurator);
			ModuleConfiguration.MappingStepsConfigurator.ProcessSteps(context.Steps, mappingConfiguration, (TFlashMapperBuilder)this);
        }

        protected abstract void ConfigureMapping(IFlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TDestination> configurator);
    }

    public abstract class FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination, TFlashMapperBuilder> : IBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination>, IFlashMapperBuilder
        where TFlashMapperBuilder: FlashMapperBuilder<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination, TFlashMapperBuilder>
    {
        private readonly IMappingConfiguration mappingConfiguration;
		
        protected FlashMapperBuilder(IMappingConfiguration mappingConfiguration)
        {
            this.mappingConfiguration = mappingConfiguration;
        }

        public TDestination Build(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TSource12 source12, TSource13 source13, TSource14 source14)
        {
            return mappingConfiguration.Convert<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TFlashMapperBuilder, TDestination>(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, source12, source13, source14, (TFlashMapperBuilder) this);
        }

        public void MapData(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, TSource6 source6, TSource7 source7, TSource8 source8, TSource9 source9, TSource10 source10, TSource11 source11, TSource12 source12, TSource13 source13, TSource14 source14, TDestination destination)
        {
            mappingConfiguration.MapData(source1, source2, source3, source4, source5, source6, source7, source8, source9, source10, source11, source12, source13, source14, (TFlashMapperBuilder)this, destination);
        }

        public void RegisterMapping()
        {
            var context = new FlashMapperBuilderConfiguratorContext();
            var configurator = new FlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination, TFlashMapperBuilder>(context, (TFlashMapperBuilder)this);
            ConfigureMapping(configurator);
			ModuleConfiguration.MappingStepsConfigurator.ProcessSteps(context.Steps, mappingConfiguration, (TFlashMapperBuilder)this);
        }

        protected abstract void ConfigureMapping(IFlashMapperBuilderConfigurator<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TDestination> configurator);
    }

}