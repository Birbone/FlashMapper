<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
	var maxNumberOfSources = 14;
	var sourceTypePrefix = "Source";
#>
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
using System;
using System.Linq.Expressions;

namespace FlashMapper.DependancyInjection
{
<#  for (var i = 0; i < maxNumberOfSources; i++)
    {
		var sourcesTypesString = string.Join(", ", Enumerable.Range(1, i + 1)
			.Select(n => $"T{sourceTypePrefix}{n}"));
#>
    public interface IFlashMapperBuilderConfigurator<<#= sourcesTypesString #>, TDestination>
    {
<#  if (i < maxNumberOfSources - 1)
	{
		var newParameterSourceTypeName = $"T{sourceTypePrefix}{i+2}";
		var sourcesTypesWithNewParameterString = $"{sourcesTypesString}, {newParameterSourceTypeName}";
#>
		IFlashMapperBuilderConfigurator<<#= sourcesTypesWithNewParameterString #>, TDestination> ResolveExtraParameter<<#= newParameterSourceTypeName #>>(Expression<Func<<#= sourcesTypesWithNewParameterString #>>> resolveParameterMethod);
<#
	}
#>
        IFlashMapperSettingsBuilder ConfigureMapping(Expression<Func<<#= sourcesTypesString #>, TDestination>> mappingExpression);
    }

<#  } #>
}