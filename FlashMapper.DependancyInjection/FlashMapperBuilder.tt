<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
	var maxNumberOfSources = 14;
	var sourceTypePrefix = "Source";
	var sourceVariablePrefix = "source";
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq.Expressions;
using FlashMapper.DependancyInjection;

namespace FlashMapper
{
<#  for (var i = 0; i < maxNumberOfSources; i++)
    {
		var sourcesTypesString = string.Join(", ", Enumerable.Range(1, i + 1)
			.Select(n => $"T{sourceTypePrefix}{n}"));
		var sourceParametersString = string.Join(", ", Enumerable.Range(1, i + 1)
			.Select(n => $"{sourceVariablePrefix}{n}"));
		var sourceMethodParametersString = string.Join(", ", Enumerable.Range(1, i + 1)
			.Select(n => $"T{sourceTypePrefix}{n} {sourceVariablePrefix}{n}"));
#>
    public abstract class FlashMapperBuilder<<#= sourcesTypesString #>, TDestination, TFlashMapperBuilder> : IBuilder<<#= sourcesTypesString #>, TDestination>, IFlashMapperBuilder
        where TFlashMapperBuilder: FlashMapperBuilder<<#= sourcesTypesString #>, TDestination, TFlashMapperBuilder>
    {
        private readonly IMappingConfiguration mappingConfiguration;
		
        protected FlashMapperBuilder(IMappingConfiguration mappingConfiguration)
        {
            this.mappingConfiguration = mappingConfiguration;
        }

        public TDestination Build(<#= sourceMethodParametersString#>)
        {
            return mappingConfiguration.Convert<<#= sourcesTypesString #>, TFlashMapperBuilder, TDestination>(<#= sourceParametersString #>, (TFlashMapperBuilder) this);
        }

        public void MapData(<#= sourceMethodParametersString#>, TDestination destination)
        {
            mappingConfiguration.MapData(<#= sourceParametersString #>, (TFlashMapperBuilder)this, destination);
        }

        public void RegisterMapping()
        {
            var context = new FlashMapperBuilderConfiguratorContext();
            var configurator = new FlashMapperBuilderConfigurator<<#= sourcesTypesString #>, TDestination, TFlashMapperBuilder>(context, (TFlashMapperBuilder)this);
            ConfigureMapping(configurator);
			ModuleConfiguration.MappingStepsConfigurator.ProcessSteps(context.Steps, mappingConfiguration, (TFlashMapperBuilder)this);
        }

        protected abstract void ConfigureMapping(IFlashMapperBuilderConfigurator<<#= sourcesTypesString #>, TDestination> configurator);
    }

<#  } #>
}